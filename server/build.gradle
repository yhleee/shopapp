buildscript {
    ext {
        springBootVersion = '2.0.3.RELEASE'
    }

    repositories {
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2' }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('io.spring.gradle:dependency-management-plugin:1.0.4.RELEASE')
        classpath('org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2')
        classpath('org.junit.platform:junit-platform-gradle-plugin:1.1.0')
        classpath('com.commercehub.gradle.plugin:gradle-avro-plugin:0.14.2')
        classpath('com.moowork.gradle:gradle-node-plugin:1.3.1')
    }
}

apply plugin: "org.sonarqube"
apply plugin: "com.moowork.node"

group = 'kr.co.oliveyoung'
version = '0.0.1-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

sourceCompatibility = 10
targetCompatibility = 10

repositories {
    jcenter()
    maven { url 'http://packages.confluent.io/maven/' }
    maven { url 'http://nexus.saas.hand-china.com/content/repositories/rdc' }
//    maven { url 'http://central.maven.org/maven2/' }
    maven { url 'https://repo1.maven.org/maven2/' }
}

jacoco {
    toolVersion = "0.8.1"
}

sonarqube {
    properties {
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.exclusions', '**/generated-sources/**/*.java'
        property 'sonar.test.exclusions', '**/generated-sources/**/*.java'
        property 'sonar.jacoco.reportPaths', "$buildDir/jacoco/test.exec"
//        property 'sonar.java.libraries', "**/lombok*.jar"
    }
}

test {
    environment "env", "dev"
    useJUnitPlatform {
        excludeTags 'slow'
        includeEngines 'junit-jupiter', 'junit-vintage'
    }
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
//        failFast = true
    testLogging.showStandardStreams = true
    ignoreFailures = true

}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.springframework.boot:spring-boot-starter-security'
    compile 'org.springframework.boot:spring-boot-starter-webflux'

    compileOnly 'org.projectlombok:lombok:1.18.6'
    testCompile 'org.projectlombok:lombok:1.18.6'
    annotationProcessor 'org.projectlombok:lombok:1.18.6'

    testCompile 'io.projectreactor:reactor-test'
    testCompile 'org.springframework.boot:spring-boot-starter-test'

    // JUnit Jupiter API and TestEngine implementation
    testCompile 'org.junit.jupiter:junit-jupiter-api'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine'
    // Only needed to run tests in a version of IntelliJ IDEA that bundles older versions
    testRuntime 'org.junit.platform:junit-platform-launcher'
    testCompile 'org.junit.platform:junit-platform-surefire-provider'
    testCompile 'org.apache.maven.plugins:maven-surefire-plugin'

    compile 'org.apache.commons:commons-lang3:3.7'
    compile 'commons-io:commons-io:2.6'

    compile 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    compile 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    compile 'org.junit.platform:junit-platform-launcher:1.3.0'
    compile 'org.junit.platform:junit-platform-surefire-provider:1.3.0'
    compile 'org.apache.maven.plugins:maven-surefire-plugin:2.22.0'

    // testing
    compile 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    compile 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    compile 'org.junit.platform:junit-platform-launcher:1.3.0'
    compile 'org.junit.platform:junit-platform-surefire-provider:1.3.0'
    compile 'org.apache.maven.plugins:maven-surefire-plugin:2.22.0'

    // JDK 10
    compile 'javax.annotation:javax.annotation-api:1.2'
    compile 'javax.activation:activation:1.1.1'

//    // jdbc
//    compile 'org.apache.commons:commons-dbcp2:2.0'

    // mybatis
    compile 'org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.1'

    // oracle
    compile 'com.oracle:ojdbc7:12.1.0.2'
    
//    // mongo db
//    compile 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'

//
    // mysql
    compile 'mysql:mysql-connector-java:5.1.42'


    // swagger
    compile 'io.springfox:springfox-swagger2:2.8.0'
    compile 'io.springfox:springfox-swagger-ui:2.8.0'
    compile 'javax.xml.bind:jaxb-api:2.3.1'

//    // spring amqp
//    compile 'org.springframework.boot:spring-boot-starter-amqp:2.0.2.RELEASE'
//    compile 'org.springframework.amqp:spring-rabbit-junit:2.0.2.RELEASE'
//    compile 'org.springframework.amqp:spring-rabbit-test:2.0.2.RELEASE'

    compile 'org.apache.poi:poi-ooxml:3.17' // .xlsx
    compile 'org.apache.poi:poi:3.17' // .xls

//    compile 'org.springframework.boot:spring-boot-starter-data-redis'

    compile 'io.github.lukehutch:fast-classpath-scanner:2.0.19'

    // @ConfigurationProperties
    compileOnly 'org.springframework.boot:spring-boot-configuration-processor'

    compile 'org.codehaus.jackson:jackson-core-asl:1.9.13'
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'

    // html parser
    compile 'org.jsoup:jsoup:1.10.3'
//    compile 'net.sourceforge.htmlunit:htmlunit:2.35.0'
    
    // ehcache 설정
    compile 'org.springframework.boot:spring-boot-starter-cache:2.1.4.RELEASE'
    compile group: 'net.sf.ehcache', name: 'ehcache', version: '2.10.6'

    compile 'commons-lang:commons-lang:2.6'
}

bootJar {
    archiveName = "shop-app.jar"
}


// node environment
def clientPath = projectDir.toString() + '/../client'
def sourceDir = "${clientPath}/build/client"
def targetDir = "src/main/resources/public"
node {
    println "CLIENT PROJECT PATH : ${clientPath}"
    nodeModulesDir = file(clientPath)
}

// yarn start:admin
task yarnStart(type: YarnTask) {
    group = 'Application'
    args = ['start:shopapp']
}

// yarn start:build
task yarnBuild(type: YarnTask) {
    group = 'Build'

    if (System.getenv("NODE_ENV") != null && System.getenv("NODE_ENV").equals("test")) {
        args = ['test-build:shopapp']
    } else {
        args = ['build:shopapp']
    }
}

task deleteStatic() {
    group = 'Build'
    delete targetDir
}

// copy client /build to server /out
task copyStatic(type: Copy) {
    group = 'Build'
    dependsOn deleteStatic
    from sourceDir
    into targetDir
}

// build with client
task buildWithClient() {
    group = 'Build'
    yarnBuild.finalizedBy copyStatic
    copyStatic.finalizedBy bootJar

    dependsOn clean
    dependsOn yarnBuild
}

// customized bootRun
task customBootRun(type: org.springframework.boot.gradle.tasks.run.BootRun, dependsOn: 'build') {
    group = 'Application'
    doFirst() {
        main = bootJar.mainClassName
        classpath = sourceSets.main.runtimeClasspath
        systemProperty 'spring.profiles.active', 'dev'
    }
}

task runTypeScriptGenerator(type: JavaExec){
    main 'kr.co.oliveyoung.shopapp.typescripts.TypeScriptGenerator'
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs '-Xmx2G'
}
